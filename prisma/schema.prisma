generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id            String         @id @default(uuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          userRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      account[]
  sessions      session[]
  habits        habit[]
  dailyFocus    dailyFocus[]
  journalEntry  journalEntry[]
}

enum userRole {
  ADMIN
  USER
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model habit {
  id          String            @id @default(uuid())
  name        String
  description String?
  color       String            @default("#3B82F6")
  icon        String?
  userId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isActive    Boolean           @default(true)
  user        user              @relation(fields: [userId], references: [id], onDelete: Cascade)
  completions habitCompletion[]

  @@index([userId])
}

model habitCompletion {
  id        String   @id @default(uuid())
  habitId   String
  userId    String
  date      DateTime
  completed Boolean  @default(true)
  createdAt DateTime @default(now())
  habit     habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, date])
  @@index([userId, date])
}

model dailyFocus {
  id          String   @id @default(uuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  priority    Int      @default(1) // 1 = high, 2 = medium, 3 = low
  date        DateTime
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
}

model journalEntry {
  id        String   @id @default(uuid())
  content   String
  mood      Int? // 1-5 scale
  date      DateTime
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model pomodoroSession {
  id          String    @id @default(uuid())
  duration    Int // in minutes
  completed   Boolean   @default(false)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  userId      String?

  @@index([userId])
}
